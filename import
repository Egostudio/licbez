#!/usr/bin/env php
<?php

error_reporting(E_ALL);
ini_set("display_errors", 1);

require_once 'api/Okay.php';
require_once 'reader/library/SimpleXMLReader.php';
include_once('lib/Slugify.class.php');


class ExampleXmlReader1 extends SimpleXMLReader
{

    public $items = array();
    
    public function __construct()
    {                
        $this->registerCallback("item", array($this, "callbackItems"));
    }

    protected function callbackItems($reader)
    {
        $xml = $reader->expandSimpleXml();
        $attributes = $xml->attributes();
	
	$from = (array) $xml->from;
	$to = (array) $xml->to;
	$in = (array) $xml->in;
	$out = (array) $xml->out;
	$minamount = (array) $xml->minamount;
	$maxamount = (array) $xml->maxamount;
	$amount = (array) $xml->amount;
	$param = (array) $xml->param;



	$data = $this->items;

	$data1['from'] = $from;
            $data1['to'] = $to;
            $data1['in'] = $in;
            $data1['out'] = $out;
            $data1['minamount'] = $minamount;
            $data1['maxamount'] = $maxamount;
            $data1['amount'] = $amount;
            $data1['param'] = $param;

            $data[] = $data1;
            $this->items = $data;


	//print_r($xml);


     // exit;
        return true;
    }
    
}

//$file = 'valuta.xml';

$files1 = array(
		'valuta.xml'
		);


$files = array(
		'https://www.nixexchange.com/best.xml',
		'https://ww-pay.com/export/xml',
		'https://imexchanger.pro/export.xml',
//		'https://i-obmen.bz/request-exportxml.xml',
		'https://magneticexchange.com/export.xml',
		'https://kassa.cc/valuta.xml',
//		'https://365cash.co/bestchange.xml'

		
		'https://365cash.co/bestchange.xml',
		'https://c1k.world/exportxmlbest',
		'https://www.nixexchange.com/best.xml',
		'https://24bestex.com/request-exportxml.xml',
		'https://hotexchange.ru/request-exportxml.xml',
		'https://bit-exchanger.ru/export.xml',
		'https://7money.co/utils/export?type=xml',
		);
echo "\n";

foreach($files as $file)
{

$time_start = microtime(true);

	$reader = new ExampleXmlReader1;
	$reader->open($file);
	$reader->parse();
	echo "feed: ".$file."\n";
	echo "Count Items: ".count($reader->items)."\n";

$time_end = microtime(true);
$exec_time = $time_end-$time_start;

	echo "Exec Time: ".$exec_time." seconds\n";
	echo "\n";
}

exit;

//$reader->open('https://www.nixexchange.com/best.xml');
//$reader->open('https://ww-pay.com/export/xml');

//$reader->open('https://imexchanger.pro/export.xml');
//$reader->open('https://i-obmen.bz/request-exportxml.xml');
//$reader->open('https://magneticexchange.com/export.xml');
//$reader->open('https://kassa.cc/valuta.xml');


$reader->open('http://sportdream.loc/valuta.xml');
$reader->parse();

//echo count($reader->items);


//print_r($reader->items);
//echo "Start import";




exit;
require_once('lib/import/Import.php');


/*
 * Class ImportCron
 *
 */
$import = new ImportCron();
$import->send('Start import');



if($argv[1]=='--full'){
    $filename = '/reader/examples/000006062-full.yml';
}
else{
    $filename = '/reader/examples/000006062.yml';
}
$file = $import->root_dir . $filename;


if($argv[1]=='--delete'){
    if($import->delete()){
        $import->send('Delete old data');  
    }
    exit();
}

if(file_exists ( $file )){
    $import->send("Root dir file: " . $file);  
}
else{
    $import->send("No file");  
    exit();
}



/*
 * Start parsing
 * Adding parsing data json to the table "Data"
 *
 */
$import->send("Start parsing");  
$reader = new ExampleXmlReader1;
$reader->open($file);
$reader->parse();
$count_items = count($reader->arr);
$import->send("The number of categories: $count_items");  





/*
 * Insert categories
 * Insert categories from data tables
 *
 */
$import->send("Start insert categories");
$k = 0;
foreach($reader->arr as $item) {
    $import->import_categories($item);
    ++$k;
}
$import->send("Number of inserted categories : $k");  





/*
 * Insert products
 * Insert products from data tables
 *
 */
$import->send("Start insert products"); 
$limit = 35; $k = 0;
$query = $import->db->placehold("SELECT * FROM __data  limit ?  ", $limit);
while($results = $import->db->query($query)) {
    $item1 = array();
    foreach($import->db->results() as $item)
    {
        $item1 = (array)json_decode($item->data);
        $product_id = $import->import_product($item1);
        $import->db->query("DELETE FROM __data WHERE id=?", $item->id);
        ++$k;
        if($k%500 == 0){
            $import->send("Number of inserted products : $k");  
        }
    }
    
    if(!count($item1)){
        break;
    }
}
$import->send("Inserted all products : $k");  






/*
 * End import
 *
 */
$reader->close();
$import->send("End import");  

